// client.ts - ÏÑúÎ≤Ñ Í∏∞Î∞ò Authorization Ï≤òÎ¶¨Î°ú Î≥ÄÍ≤Ω
import fs from 'fs';
import path from 'path';
import dotenv from 'dotenv';
import axios from 'axios';
import { MetaMaskSDK } from '@metamask/sdk';
import {
  createPublicClient,
  createWalletClient,
  http,
  encodeFunctionData,
  decodeFunctionResult,
  type Address,
  type Hex,
} from 'viem';
import { privateKeyToAccount } from 'viem/accounts';

const envPath = path.resolve(process.cwd(), '.env');
const parsed = dotenv.parse(fs.readFileSync(envPath));

const KEYS = [
  'RPC_URL','SERVER_URL','PRIVATE_KEY','DELEGATE_ADDRESS',
  'TOKEN','TO','AMOUNT_WEI','CHAIN_ID'
] as const;
for (const k of KEYS) {
  const v = parsed[k as keyof typeof parsed];
  if (v != null) process.env[k] = v.replace(/^\uFEFF/, '').replace(/[\r\n]+$/g, '').trim();
}

const RPC_URL          = process.env.RPC_URL!;
const SERVER_URL       = process.env.SERVER_URL!;
const AUTHORITY_PK     = process.env.PRIVATE_KEY!;
const DELEGATE_ADDRESS = process.env.DELEGATE_ADDRESS!;
const TOKEN            = process.env.TOKEN!;
const TO               = process.env.TO!;
const AMOUNT_WEI       = process.env.AMOUNT_WEI!;
const CHAIN_ID         = Number(process.env.CHAIN_ID!);

type Transfer = {
  from: string;
  token: string;
  to: string;
  amount: bigint;
  nonce: bigint;
  deadline: bigint;
};

// slot0 ÏùΩÍ∏∞ (fallback)
async function readNextNonceViaStorage(publicClient: any, authority: string): Promise<bigint> {
  const raw = await publicClient.getStorageAt({
    address: authority as Address,
    slot: '0x0',
    blockTag: 'latest'
  });
  return BigInt(raw || 0);
}

async function main() {
  console.log('üöÄ MetaMask SDKÎ•º ÏÇ¨Ïö©Ìïú ÏÑúÎ≤Ñ Í∏∞Î∞ò EIP-7702 Í∞ÄÏä§Î¶¨Ïä§ Í≤∞Ï†ú ÏãúÏûë...');

  // MetaMask SDK Ï¥àÍ∏∞Ìôî (Node.js ÌôòÍ≤ΩÏö©)
  const MMSDK = new MetaMaskSDK({
    dappMetadata: {
      name: "StableCoin Payment Client",
      url: "http://localhost:3000", 
    },
    headless: true,
    extensionOnly: false,
  });

  const publicClient = createPublicClient({
    transport: http(RPC_URL),
  });

  const account = privateKeyToAccount(AUTHORITY_PK as Hex);
  const walletClient = createWalletClient({
    account,
    transport: http(RPC_URL),
  });

  const authority = account.address;

  const chainId = await publicClient.getChainId();
  if (Number(chainId) !== CHAIN_ID) {
    throw new Error(`RPC chainId(${Number(chainId)}) != CHAIN_ID(${CHAIN_ID})`);
  }

  console.log(`‚úÖ Ï≤¥Ïù∏ Ïó∞Í≤∞ ÏôÑÎ£å: ${CHAIN_ID}`);
  console.log(`üîë Authority Ï£ºÏÜå: ${authority}`);

  try {
    // 1) nextNonce ÏùΩÍ∏∞ (AuthorizationÏùÄ ÏÑúÎ≤ÑÏóêÏÑú Ï≤òÎ¶¨ÌïòÎØÄÎ°ú Í∞ÑÎã®ÌïòÍ≤å storageÏóêÏÑú ÏùΩÍ∏∞)
    console.log('üî¢ Nonce ÏùΩÍ∏∞ Ï§ë...');
    
    let nextNonce: bigint;
    try {
      // storage slotÏóêÏÑú ÏßÅÏ†ë ÏùΩÍ∏∞ (Í∞ÑÎã®Ìïú Î∞©Î≤ï)
      nextNonce = await readNextNonceViaStorage(publicClient, authority);
      console.log('‚úÖ Storage slot nonce:', nextNonce.toString());
    } catch (e) {
      console.warn('‚ö†Ô∏è Storage slot ÏùΩÍ∏∞ Ïã§Ìå®, nonce 0 ÏÇ¨Ïö©:', e?.message);
      nextNonce = BigInt(0);
    }

    // 2) EIP-712 ÏÑúÎ™Ö (private keyÎ°ú ÏßÅÏ†ë ÏÑúÎ™Ö)
    console.log('‚úçÔ∏è EIP-712 ÏÑúÎ™Ö ÏÉùÏÑ± Ï§ë...');
    
    const domain = {
      name: 'DelegatedTransfer',
      version: '1',
      chainId: CHAIN_ID,
      verifyingContract: DELEGATE_ADDRESS as Address, // ÏúÑÏûÑÎêú Ïª®Ìä∏ÎûôÌä∏ Ï£ºÏÜå (EIP-7702 ÏöîÍµ¨ÏÇ¨Ìï≠)
    };

    const types = {
      Transfer: [
        { name: 'from', type: 'address' },
        { name: 'token', type: 'address' },
        { name: 'to', type: 'address' },
        { name: 'amount', type: 'uint256' },
        { name: 'nonce', type: 'uint256' }, // == nextNonce
        { name: 'deadline', type: 'uint256' },
      ],
    };

    const transfer: Transfer = {
      from: authority,
      token: TOKEN,
      to: TO,
      amount: BigInt(AMOUNT_WEI),
      nonce: nextNonce,
      deadline: BigInt(Math.floor(Date.now() / 1000) + 300), // 5Î∂Ñ
    };

    // private keyÎ°ú ÏßÅÏ†ë ÏÑúÎ™Ö (RPCÍ∞Ä signTypedDataÎ•º ÏßÄÏõêÌïòÏßÄ ÏïäÎäî Í≤ΩÏö∞)
    const signature712 = await account.signTypedData({
      domain,
      types,
      primaryType: 'Transfer',
      message: transfer,
    });

    console.log('‚úÖ EIP-712 ÏÑúÎ™Ö ÏôÑÎ£å');

    // 3) ÏÑúÎ≤ÑÎ°ú Ï†ÑÏÜ° (AuthorizationÏùÄ ÏÑúÎ≤ÑÏóêÏÑú ÏÉùÏÑ±Îê®)
    console.log('üåê ÏÑúÎ≤ÑÎ°ú Í∞ÄÏä§Î¶¨Ïä§ Í≤∞Ï†ú ÏöîÏ≤≠ Ï†ÑÏÜ° Ï§ë...');
    
    const body = {
      authority,
      transfer: {
        from: transfer.from,
        token: transfer.token,
        to: transfer.to,
        amount: transfer.amount.toString(),
        nonce: transfer.nonce.toString(),
        deadline: transfer.deadline.toString(),
      },
      domain,
      types,
      signature712,
      // authorizationÏùÄ ÏÑúÎ≤ÑÏóêÏÑú ÏÉùÏÑ±ÎêòÎØÄÎ°ú Ï†úÍ±∞Îê®
    };

    // ÏÑúÎ≤ÑÏùò ÏÉàÎ°úÏö¥ ÏóîÎìúÌè¨Ïù∏Ìä∏ ÏÇ¨Ïö©
    const response = await axios.post(`${SERVER_URL}/server-payment`, body, { 
      timeout: 30_000,
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ ÏÑúÎ≤Ñ ÏùëÎãµ:', response.data);
    
    if (response.data.status === 'ok') {
      console.log('üéâ Í∞ÄÏä§Î¶¨Ïä§ Í≤∞Ï†úÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
      console.log(`üìã Ìä∏ÎûúÏû≠ÏÖò Ìï¥Ïãú: ${response.data.txHash}`);
      console.log(`üîê ÏÑúÎ≤ÑÏóêÏÑú ÏÉùÏÑ±Îêú Authorization: ${JSON.stringify(response.data.authorization, null, 2)}`);
    } else {
      throw new Error(response.data.message || 'Í≤∞Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }

  } catch (error) {
    console.error('‚ùå Í≤∞Ï†ú Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    throw error;
  }
}

main().catch((e) => { 
  console.error('üí• Ï†ÑÏ≤¥ ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìå®:', e); 
  process.exit(1); 
});
